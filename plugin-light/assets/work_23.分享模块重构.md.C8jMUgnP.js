import{_ as o,c as a,b as c,ag as i}from"./chunks/framework.CMjv3OHl.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"work/23.分享模块重构.md","filePath":"work/23.分享模块重构.md","lastUpdated":1754058176000}'),d={name:"work/23.分享模块重构.md"};function l(t,e,r,h,s,n){return c(),a("div",null,e[0]||(e[0]=[i('<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>重构了分享模块，介绍下。</p><h2 id="_2-当前痛点" tabindex="-1">2. 当前痛点 <a class="header-anchor" href="#_2-当前痛点" aria-label="Permalink to &quot;2. 当前痛点&quot;">​</a></h2><ol><li>引入了<code>jsapi</code>，体积太大，文件太多，可读性、可维护性太差。本来就是非常简单的东西，加载<code>sdk</code>、调用全局变量即可，现在变得非常麻烦</li><li>类型缺失，使用、阅读、开发、调试困难 <ul><li>多个全局对象 <code>shareObject</code>、<code>shareUiObject</code> 没有类型</li><li>分享类别 <code>shareType</code> 没有类型，都是<code>1234</code>的魔法字符串</li><li>对外的API，比如 <code>initShare</code> 没有类型</li></ul></li><li>最关键的一点，分享根本不是首屏所需资源，不是必要路径，完全可以异步加载</li></ol><p>当前 <code>pmd</code> 体积:</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_1ee0e93a76cf00acf0.png" width="600"><p>把分享重定向到一个伪文件，即去掉分享后的 <code>pmd</code> 体积：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_43a0c42a4cb653343a.png" width="600"><p>可见分享模块的体积已经达到了 <code>97.49KB</code>，亟需优化。</p><p>光 <code>jsapi</code> 就有 <code>58.34KB</code>。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_d45c10acbf304f3975.png" width="600"><h2 id="_3-优化思路" tabindex="-1">3. 优化思路 <a class="header-anchor" href="#_3-优化思路" aria-label="Permalink to &quot;3. 优化思路&quot;">​</a></h2><ol><li>去掉 <code>jsapi</code></li><li>补充类型提示</li><li>封装异步加载逻辑，业务不关心</li></ol><p>其他：</p><ol><li><code>Toast</code>， <code>Dialog</code> 改为外部传入，方便切换组件库 <ul><li><code>Toast.show</code> =&gt; <code>showToast</code></li><li><code>Dialog.confirm</code> =&gt; <code>showConfirmDialog</code></li></ul></li><li><code>toast</code> 和 <code>dialog</code> 文案支持自定义</li><li><code>postGetMiniProgramOpenLink</code> 改为外部传入，可以充分自定义。传入的时候，就应该封装好参数，<code>share</code> 内部不关心。另外，这里真的需要这么做吗，很多业务已经改成明文 <code>scheme</code> 了，根本不用传了</li><li><code>configWx</code> 改为外部传入，适应任意业务</li><li>支持隐藏任意分享渠道，传入 <code>hideShareType</code> 参数即可，并把之前内部的账号判断移出 <code>share</code> 核心逻辑</li><li><code>getEnvVersion</code> 去掉，没找到需要它的地方</li><li><code>isTestEnv</code>，同样去掉</li></ol><h2 id="_4-成果" tabindex="-1">4. 成果 <a class="header-anchor" href="#_4-成果" aria-label="Permalink to &quot;4. 成果&quot;">​</a></h2><p>减少 <code>85KB</code>。</p><p>之前：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_0ce48c3b497a47cc7b.png" width="600"><p>之后：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_8f266681fa965b8410.png" width="600"><h2 id="_5-share-light" tabindex="-1">5. share-light <a class="header-anchor" href="#_5-share-light" aria-label="Permalink to &quot;5. share-light&quot;">​</a></h2><p><code>share-light</code> 代码在 <a href="https://github.com/novlan1/plugin-light/tree/master/packages/share-light" target="_blank" rel="noreferrer">plugin-light</a> 中，<a href="./../zh/share-light.html">点此查看文档</a>。</p>',23)]))}const m=o(d,[["render",l]]);export{_ as __pageData,m as default};
