import{_ as i,c as t,o as s,ag as a}from"./chunks/framework.BRPdiB5p.js";const m=JSON.parse('{"title":"StyleLint Config Common","description":"","frontmatter":{},"headers":[],"relativePath":"zh/stylelint-config-common.md","filePath":"zh/stylelint-config-common.md","lastUpdated":1751873598000}'),n={name:"zh/stylelint-config-common.md"};function o(l,e,r,h,c,d){return s(),t("div",null,e[0]||(e[0]=[a(`<h1 id="stylelint-config-common" tabindex="-1">StyleLint Config Common <a class="header-anchor" href="#stylelint-config-common" aria-label="Permalink to &quot;StyleLint Config Common&quot;">​</a></h1><p align="center"><img src="https://img.shields.io/npm/dw/stylelint-config-common"><img src="https://img.shields.io/npm/unpacked-size/stylelint-config-common"><img src="https://img.shields.io/npm/v/stylelint-config-common"><img src="https://img.shields.io/npm/l/stylelint-config-common"><img src="https://img.shields.io/github/last-commit/novlan1/plugin-light"><img src="https://img.shields.io/github/created-at/novlan1/plugin-light"></p><p><strong>开箱即用</strong>的 StyleLint 配置。</p><h2 id="_1-如何使用" tabindex="-1">1. 如何使用 <a class="header-anchor" href="#_1-如何使用" aria-label="Permalink to &quot;1. 如何使用&quot;">​</a></h2><p><code>.stylelintrc.js</code>文件：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stylelint-config-common&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_2-faq" tabindex="-1">2. FAQ <a class="header-anchor" href="#_2-faq" aria-label="Permalink to &quot;2. FAQ&quot;">​</a></h2><h3 id="_2-1-为什么不直接使用公司配置" tabindex="-1">2.1. 为什么不直接使用公司配置 <a class="header-anchor" href="#_2-1-为什么不直接使用公司配置" aria-label="Permalink to &quot;2.1. 为什么不直接使用公司配置&quot;">​</a></h3><p>UI开发排斥 <a href="https://stylelint.bootcss.com/user-guide/rules/string-quotes.html" target="_blank" rel="noreferrer">string-quotes</a> 这个规则，这个规则只能配置 <code>single</code> 或者 <code>double</code>，要去掉只能改配置，所以这里直接新建了一个通用配置。</p><h3 id="_2-2-border-none" tabindex="-1">2.2. border: none <a class="header-anchor" href="#_2-2-border-none" aria-label="Permalink to &quot;2.2. border: none&quot;">​</a></h3><p>同样的，UI开发排斥 <a href="https://stylelint.io/user-guide/rules/declaration-property-value-disallowed-list/" target="_blank" rel="noreferrer">border: none =&gt; border: 0</a> 这个规则，<code>stylelint-config-common</code> 中已经去掉。</p><h3 id="_2-3-linebreaks" tabindex="-1">2.3. linebreaks <a class="header-anchor" href="#_2-3-linebreaks" aria-label="Permalink to &quot;2.3. linebreaks&quot;">​</a></h3><p>统一使用 <code>unix</code> <a href="https://stylelint.bootcss.com/user-guide/rules/linebreaks.html" target="_blank" rel="noreferrer">换行符</a>，即 <code>LF</code> (<code>\\n</code>)，避免合并代码时都是文件级别的冲突，难以解决。</p><h2 id="_3-更新日志" tabindex="-1">3. 更新日志 <a class="header-anchor" href="#_3-更新日志" aria-label="Permalink to &quot;3. 更新日志&quot;">​</a></h2><p><a href="./../changelog/stylelint-config-common.html">点此查看</a></p>`,15)]))}const g=i(n,[["render",o]]);export{m as __pageData,g as default};
