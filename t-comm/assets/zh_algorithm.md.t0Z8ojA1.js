import{_ as a,c as e,o as i,ag as n}from"./chunks/framework.DYzZjXOQ.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/algorithm.md","filePath":"zh/algorithm.md","lastUpdated":1756813765000}'),r={name:"zh/algorithm.md"};function p(t,s,l,o,h,d){return i(),e("div",null,s[0]||(s[0]=[n(`<h3 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mergeTwoSortedArrayV1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mergeTwoSortedArrayV2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  removeElementInArrayV1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  removeElementInArrayV2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不支持 tree-shaking 的项目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mergeTwoSortedArrayV1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mergeTwoSortedArrayV2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  removeElementInArrayV1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  removeElementInArrayV2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm/lib/algorithm/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只支持 ESM 的项目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mergeTwoSortedArrayV1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mergeTwoSortedArrayV2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  removeElementInArrayV1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  removeElementInArrayV2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm/es/algorithm/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="mergetwosortedarrayv1" tabindex="-1"><code>mergeTwoSortedArrayV1()</code> <a class="header-anchor" href="#mergetwosortedarrayv1" aria-label="Permalink to &quot;\`mergeTwoSortedArrayV1()\`&quot;">​</a></h3><p><strong>描述</strong>：<p>88.合并两个有序数组</p></p><p>https://leetcode.cn/problems/merge-sorted-array/description/?envType=study-plan-v2&amp;envId=top-interview-150</p><p>双指针解法</p><ul><li><p>将两个数组看成队列，每次从数组头部取出较小数字放到结果中</p></li><li><p>时间复杂度 O(m + n)</p></li><li><p>空间复杂度 O(m + n)</p></li></ul><p><strong>参数</strong>：</p><p><a name="mergeTwoSortedArrayV2"></a></p><h3 id="mergetwosortedarrayv2" tabindex="-1"><code>mergeTwoSortedArrayV2()</code> <a class="header-anchor" href="#mergetwosortedarrayv2" aria-label="Permalink to &quot;\`mergeTwoSortedArrayV2()\`&quot;">​</a></h3><p><strong>描述</strong>：<p>88.合并两个有序数组</p></p><p>https://leetcode.cn/problems/merge-sorted-array/description/?envType=study-plan-v2&amp;envId=top-interview-150</p><p>逆向双指针解法</p><ul><li><p>指针初始位置在尾部，每次向前移动</p></li><li><p>不用临时数组 temp，因为不用担心前面的被覆盖</p></li><li><p>时间复杂度 O(m + n)</p></li><li><p>空间复杂度 O(1)</p></li></ul><p><strong>参数</strong>：</p><p><a name="removeElementInArrayV1"></a></p><h3 id="removeelementinarrayv1" tabindex="-1"><code>removeElementInArrayV1()</code> <a class="header-anchor" href="#removeelementinarrayv1" aria-label="Permalink to &quot;\`removeElementInArrayV1()\`&quot;">​</a></h3><p><strong>描述</strong>：<p>27.移除元素</p></p><p>https://leetcode.cn/problems/remove-element/description/?envType=study-plan-v2&amp;envId=top-interview-150</p><p>双指针。</p><ul><li><p>右指针 right 指向当前将要处理的元素，左指针 left 指向下一个将要赋值的位置。</p></li><li><p>如果右指针不等于 val，就将右指针指向的值赋值给左指针位置，左指针右移一位。</p></li><li><p>时间复杂度：O(n)，其中 n 为序列的长度。我们只需要遍历该序列至多两次。</p></li><li><p>空间复杂度：O(1)。我们只需要常数的空间保存若干变量</p></li></ul><p><strong>参数</strong>：</p><p><a name="removeElementInArrayV2"></a></p><h3 id="removeelementinarrayv2" tabindex="-1"><code>removeElementInArrayV2()</code> <a class="header-anchor" href="#removeelementinarrayv2" aria-label="Permalink to &quot;\`removeElementInArrayV2()\`&quot;">​</a></h3><p><strong>描述</strong>：<p>27.移除元素</p></p><p>https://leetcode.cn/problems/remove-element/description/?envType=study-plan-v2&amp;envId=top-interview-150</p><p>对撞指针。</p><ul><li><p>两个指针初始时分别位于数组的首尾，向中间移动遍历该序列。</p></li><li><p>如果左指针 left 指向的元素等于 val，此时将右指针 right 指向的元素复制到左指针 left 的位置，然后右指针 right 左移一位。否则左指针 left 右移一位。</p></li><li><p>时间复杂度：O(n)，其中 n 为序列的长度。我们只需要遍历该序列至多一次。</p></li><li><p>空间复杂度：O(1)。我们只需要常数的空间保存若干变量</p></li></ul><p>第一种是快慢指针，第二种是对撞指针，同样是双指针，前者同向出发，因此用一个 for 循环实现遍历；后者前后出发，因此用 while 循环判断指针对撞时退出循环</p><p><strong>参数</strong>：</p>`,30)]))}const E=a(r,[["render",p]]);export{m as __pageData,E as default};
